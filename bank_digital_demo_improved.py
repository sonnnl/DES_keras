import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
import time
import random
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from Crypto.Cipher import DES
from Crypto.Util.Padding import pad, unpad
import csv
import binascii
import string

# Th·ª≠ import m√¥ h√¨nh th·ª±c, n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ d√πng m√¥ h√¨nh gi·∫£
try:
    from ml_enhanced_des import MLEnhancedDES, encrypt_data, decrypt_data
    print("ƒê√£ t·∫£i th√†nh c√¥ng module MLEnhancedDES")
    IS_ML_ENHANCED = True
except ImportError:
    print("Kh√¥ng th·ªÉ import MLEnhancedDES, s·ª≠ d·ª•ng DES ti√™u chu·∫©n")
    IS_ML_ENHANCED = False

# M√¥ ph·ªèng adapter ƒë·ªÉ gi·ªØ t∆∞∆°ng th√≠ch v·ªõi code c≈©
class DESAdapter:
    def __init__(self):
        self.ml_des = MLEnhancedDES() if IS_ML_ENHANCED else None
        self.model_loaded = False
        self.using_mock = False
        
    def load_model(self, path=None):
        if IS_ML_ENHANCED:
            try:
                success = self.ml_des.load_models()
                self.model_loaded = success
                print(f"T·∫£i m√¥ h√¨nh MLEnhancedDES: {'th√†nh c√¥ng' if success else 'th·∫•t b·∫°i'}")
                return self
            except Exception as e:
                print(f"L·ªói khi t·∫£i m√¥ h√¨nh MLEnhancedDES: {e}")
                self.model_loaded = False
                return self
        else:
            print("S·ª≠ d·ª•ng DES ti√™u chu·∫©n, kh√¥ng c·∫ßn t·∫£i m√¥ h√¨nh")
        return self
        
    def predict_key(self, plaintext, ciphertext):
        if not IS_ML_ENHANCED or not self.model_loaded:
            # Tr·∫£ v·ªÅ kh√≥a ng·∫´u nhi√™n n·∫øu kh√¥ng c√≥ ML
            return os.urandom(8)
        
        # MLEnhancedDES kh√¥ng c√≥ h√†m predict_key, ƒë√¢y ch·ªâ l√† m√¥ ph·ªèng
        return os.urandom(8)

# S·ª≠ d·ª•ng DESAdapter thay cho DESKeyPredictor
DESKeyPredictor = DESAdapter
    
class DigitalBankingSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("M√¥ Ph·ªèng Ng√¢n H√†ng S·ªë v·ªõi DES + ML")
        self.root.geometry("1000x700")
        self.root.configure(bg="#f0f0f0")
        
        # Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng ML
        self.using_mock = not IS_ML_ENHANCED
        self.ml_des = None
        self.model_loaded = False
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng ML-Enhanced DES n·∫øu c√≥ th·ªÉ
        if IS_ML_ENHANCED:
            self.ml_des = MLEnhancedDES()
            try:
                success = self.ml_des.load_models()
                self.model_loaded = success
                print(f"T·∫£i m√¥ h√¨nh MLEnhancedDES: {'th√†nh c√¥ng' if success else 'th·∫•t b·∫°i'}")
            except Exception as e:
                print(f"L·ªói khi t·∫£i m√¥ h√¨nh MLEnhancedDES: {e}")
                self.model_loaded = False
                self.using_mock = True
        else:
            # Kh·ªüi t·∫°o predictor thay th·∫ø n·∫øu kh√¥ng c√≥ ML-Enhanced DES
            self.using_mock = True
            
        self.predictor = DESKeyPredictor()
        try:
            self.predictor.load_model()
            self.model_loaded = True
        except Exception as e:
            print(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
            self.model_loaded = False
            
        # T·∫°o kh√≥a ng·∫´u nhi√™n cho m·ªói "ng∆∞·ªùi d√πng"
        self.user_keys = {
            f"User_{i}": os.urandom(8) for i in range(1, 6)
        }
        
        # ƒê·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu giao d·ªãch
        self.transaction_data = []
        
        # Tr·∫°ng th√°i m√¥ ph·ªèng
        self.simulation_running = False
        self.simulation_thread = None
        self.transaction_count = 0
        self.traditional_times = []
        self.ml_times = []
        self.bit_accuracies = []
        
        # Thi·∫øt l·∫≠p UI
        self.setup_ui()
        
    def setup_ui(self):
        # Notebook (tabbed interface)
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # T·∫°o c√°c tab
        simulation_tab = ttk.Frame(self.notebook)
        des_enc_tab = ttk.Frame(self.notebook)
        des_dec_tab = ttk.Frame(self.notebook)
        
        # Th√™m tab v√†o notebook
        self.notebook.add(simulation_tab, text="M√¥ ph·ªèng giao d·ªãch")
        self.notebook.add(des_enc_tab, text="So s√°nh m√£ h√≥a")
        self.notebook.add(des_dec_tab, text="So s√°nh gi·∫£i m√£")
        
        # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc notebook
        self.notebook.config(width=800)
        
        # Thi·∫øt l·∫≠p UI cho tab m√¥ ph·ªèng
        self.setup_simulation_tab(simulation_tab)
        
        # Thi·∫øt l·∫≠p UI cho tab Encryption
        self.setup_des_encryption_tab(des_enc_tab)
        
        # Thi·∫øt l·∫≠p UI cho tab Decryption
        self.setup_des_decryption_tab(des_dec_tab)
        
    def setup_simulation_tab(self, parent):
        # Title
        title_label = ttk.Label(
            parent, 
            text="M√¥ Ph·ªèng Ng√¢n H√†ng S·ªë S·ª≠ D·ª•ng ML TƒÉng T·ªëc DES", 
            font=("Arial", 16, "bold")
        )
        title_label.pack(pady=10)
        
        # Tr·∫°ng th√°i m√¥ h√¨nh
        model_status = "ƒê√£ t·∫£i" if self.model_loaded else "Ch∆∞a t·∫£i"
        if IS_ML_ENHANCED:
            if self.model_loaded:
                model_status += " (ML-Enhanced DES)"
                model_status_color = "green"
            else:
                model_status += " (ML-Enhanced DES kh√¥ng kh·∫£ d·ª•ng)"
                model_status_color = "red"
        else:
            if hasattr(self, 'using_mock') and self.using_mock:
                model_status += " (M√¥ ph·ªèng - Kh√¥ng c√≥ TensorFlow)"
                model_status_color = "orange"
            else:
                model_status_color = "green" if self.model_loaded else "red"
        
        model_status_label = ttk.Label(
            parent,
            text=f"Tr·∫°ng th√°i m√¥ h√¨nh ML: {model_status}",
            foreground=model_status_color,
            font=("Arial", 10)
        )
        model_status_label.pack(pady=5)
        
        # Frame ƒëi·ªÅu khi·ªÉn
        control_frame = ttk.LabelFrame(parent, text="ƒêi·ªÅu Khi·ªÉn M√¥ Ph·ªèng", padding=10)
        control_frame.pack(fill=tk.X, pady=10)
        
        # N√∫t b·∫Øt ƒë·∫ßu/d·ª´ng v√† xu·∫•t d·ªØ li·ªáu
        btn_frame = ttk.Frame(control_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        self.start_btn = ttk.Button(btn_frame, text="B·∫Øt ƒê·∫ßu M√¥ Ph·ªèng", command=self.start_simulation)
        self.start_btn.pack(side=tk.LEFT, padx=5)
        
        self.stop_btn = ttk.Button(btn_frame, text="D·ª´ng M√¥ Ph·ªèng", command=self.stop_simulation, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT, padx=5)
        
        self.export_btn = ttk.Button(btn_frame, text="Xu·∫•t D·ªØ Li·ªáu", command=self.export_transaction_data)
        self.export_btn.pack(side=tk.LEFT, padx=5)
        
        # ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô m√¥ ph·ªèng
        speed_frame = ttk.Frame(control_frame)
        speed_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(speed_frame, text="T·ªëc ƒë·ªô m√¥ ph·ªèng:").pack(side=tk.LEFT, padx=5)
        self.speed_var = tk.DoubleVar(value=1.0)
        self.speed_scale = ttk.Scale(speed_frame, from_=0.1, to=2.0, orient=tk.HORIZONTAL, 
                                    variable=self.speed_var, length=200)
        self.speed_scale.pack(side=tk.LEFT, padx=5)
        ttk.Label(speed_frame, textvariable=tk.StringVar(value=lambda: f"{self.speed_var.get():.1f}x")).pack(side=tk.LEFT)
        
        # Frame log
        log_frame = ttk.LabelFrame(parent, text="Nh·∫≠t K√Ω Giao D·ªãch", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=10)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Frame bi·ªÉu ƒë·ªì
        chart_frame = ttk.LabelFrame(parent, text="Ph√¢n T√≠ch Hi·ªáu Su·∫•t", padding=10)
        chart_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # T·∫°o bi·ªÉu ƒë·ªì
        self.fig, (self.ax1, self.ax2) = plt.subplots(1, 2, figsize=(10, 4))
        self.fig.tight_layout(pad=3.0)
        
        self.canvas = FigureCanvasTkAgg(self.fig, chart_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì
        self.update_charts()
        
    def setup_des_encryption_tab(self, parent):
        # Frame ch√≠nh
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame nh·∫≠p li·ªáu
        input_frame = ttk.LabelFrame(main_frame, text="ƒê·∫ßu v√†o", padding=10)
        input_frame.pack(fill=tk.X, pady=5)
        
        # Nh√£n c·∫£nh b√°o
        warning_label = ttk.Label(
            input_frame,
            text="‚ö†Ô∏è L∆ØU √ù: ML-Enhanced DES t·∫°o ra k·∫øt qu·∫£ m√£ h√≥a KH√ÅC v·ªõi DES chu·∫©n ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω üöÄ",
            foreground="red",
            font=("Arial", 10, "bold")
        )
        warning_label.grid(row=0, column=0, columnspan=4, sticky="w", pady=5)
        
        # Gi·∫£i th√≠ch
        explanation_label = ttk.Label(
            input_frame,
            text="ML-Enhanced DES s·ª≠ d·ª•ng m·∫°ng neural thay th·∫ø S-box c·ªßa DES, t·∫°o ra ciphertext kh√°c nh∆∞ng nhanh h∆°n.",
            font=("Arial", 9)
        )
        explanation_label.grid(row=1, column=0, columnspan=4, sticky="w", pady=5)
        
        # Plaintext
        ttk.Label(input_frame, text="Plaintext (hex):").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.enc_plaintext = tk.Text(input_frame, height=3, width=50)
        self.enc_plaintext.grid(row=2, column=1, columnspan=2, sticky="we", padx=5, pady=5)
        self.enc_plaintext.insert("1.0", "Nh·∫≠p hex c·∫ßn m√£ h√≥a...")
        
        rand_plain_btn = ttk.Button(input_frame, text="Ng·∫´u nhi√™n", command=self.generate_random_enc_plaintext)
        rand_plain_btn.grid(row=2, column=3, sticky="w", padx=5, pady=5)
        
        # Key
        ttk.Label(input_frame, text="Key (hex):").grid(row=3, column=0, sticky="w", padx=5, pady=5)
        self.enc_key = ttk.Entry(input_frame, width=50)
        self.enc_key.grid(row=3, column=1, columnspan=2, sticky="we", padx=5, pady=5)
        self.enc_key.insert(0, "4D4C2D444553303100")
        
        rand_key_btn = ttk.Button(input_frame, text="Ng·∫´u nhi√™n", command=self.generate_random_enc_key)
        rand_key_btn.grid(row=3, column=3, sticky="w", padx=5, pady=5)
        
        # K√≠ch th∆∞·ªõc d·ªØ li·ªáu test
        ttk.Label(input_frame, text="K√≠ch th∆∞·ªõc d·ªØ li·ªáu test:").grid(row=4, column=0, sticky="w", padx=5, pady=5)
        self.data_size_var = tk.StringVar(value="8 bytes")
        data_size_combo = ttk.Combobox(input_frame, textvariable=self.data_size_var, 
                                      values=["8 bytes", "64 bytes", "512 bytes", "4096 bytes", "32768 bytes"], width=15)
        data_size_combo.grid(row=4, column=1, sticky="w", padx=5, pady=5)
        data_size_combo.current(0)
        
        # S·ªë l·∫ßn l·∫∑p
        ttk.Label(input_frame, text="S·ªë l·∫ßn l·∫∑p ƒë·ªÉ ƒëo:").grid(row=4, column=2, sticky="w", padx=5, pady=5)
        self.benchmark_iterations_var = tk.StringVar(value="100")
        iterations_combo = ttk.Combobox(input_frame, textvariable=self.benchmark_iterations_var, 
                                      values=["10", "100", "1000"], width=10)
        iterations_combo.grid(row=4, column=3, sticky="w", padx=5, pady=5)
        iterations_combo.current(1)
        
        # Frame n√∫t
        btn_frame = ttk.Frame(input_frame)
        btn_frame.grid(row=5, column=0, columnspan=4, pady=10)
        
        # Buttons
        encrypt_btn = ttk.Button(btn_frame, text="M√£ h√≥a v√† So s√°nh", command=self.encrypt_and_compare)
        encrypt_btn.pack(side=tk.LEFT, padx=5)
        
        clear_btn = ttk.Button(btn_frame, text="X√≥a", command=lambda: self.clear_encryption_fields())
        clear_btn.pack(side=tk.LEFT, padx=5)
        
        # Frame k·∫øt qu·∫£
        result_frame = ttk.LabelFrame(main_frame, text="K·∫øt qu·∫£", padding=10)
        result_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # T·∫°o hai c·ªôt cho DES v√† ML-DES
        result_columns = ttk.Frame(result_frame)
        result_columns.pack(fill=tk.BOTH, expand=True)
        
        # C·ªôt DES
        des_frame = ttk.LabelFrame(result_columns, text="DES Truy·ªÅn th·ªëng", padding=10)
        des_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        ttk.Label(des_frame, text="Ciphertext (hex):").pack(anchor="w", pady=2)
        self.des_ciphertext = scrolledtext.ScrolledText(des_frame, height=4, width=30)
        self.des_ciphertext.pack(fill=tk.X, pady=5)
        
        ttk.Label(des_frame, text="Th·ªùi gian m√£ h√≥a:").pack(anchor="w", pady=2)
        self.des_time = ttk.Label(des_frame, text="N/A")
        self.des_time.pack(anchor="w", pady=2)
        
        # C·ªôt ML-DES
        ml_des_frame = ttk.LabelFrame(result_columns, text="ML-Enhanced DES", padding=10)
        ml_des_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        ttk.Label(ml_des_frame, text="Ciphertext (hex):").pack(anchor="w", pady=2)
        self.ml_des_ciphertext = scrolledtext.ScrolledText(ml_des_frame, height=4, width=30)
        self.ml_des_ciphertext.pack(fill=tk.X, pady=5)
        
        ttk.Label(ml_des_frame, text="Th·ªùi gian m√£ h√≥a:").pack(anchor="w", pady=2)
        self.ml_des_time = ttk.Label(ml_des_frame, text="N/A")
        self.ml_des_time.pack(anchor="w", pady=2)
        
        ttk.Label(ml_des_frame, text="ƒê·ªô t∆∞∆°ng ƒë·ªìng v·ªõi DES chu·∫©n:").pack(anchor="w", pady=2)
        self.ml_des_accuracy = ttk.Label(ml_des_frame, text="N/A")
        self.ml_des_accuracy.pack(anchor="w", pady=2)
        
        ttk.Label(ml_des_frame, text="TƒÉng t·ªëc:").pack(anchor="w", pady=2)
        self.ml_des_speedup = ttk.Label(ml_des_frame, text="N/A")
        self.ml_des_speedup.pack(anchor="w", pady=2)
        
        # Log frame
        log_frame = ttk.LabelFrame(main_frame, text="Chi ti·∫øt th·ª±c thi", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.encryption_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.encryption_log.pack(fill=tk.BOTH, expand=True)
        
    def encrypt_and_compare(self):
        # X√≥a log hi·ªán t·∫°i
        self.encryption_log.delete(1.0, tk.END)
        self.log_to_enc("B·∫Øt ƒë·∫ßu so s√°nh hi·ªáu su·∫•t m√£ h√≥a...\n")
        
        # L·∫•y input
        plaintext_hex = self.enc_plaintext.get("1.0", tk.END).strip()
        key_hex = self.enc_key.get().strip()
        
        # Ki·ªÉm tra input
        if not plaintext_hex or not key_hex:
            self.log_to_enc("L·ªói: Plaintext ho·∫∑c key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
            
        # Ki·ªÉm tra key hex c√≥ h·ª£p l·ªá kh√¥ng
        try:
            key_bytes = bytes.fromhex(key_hex)
            if len(key_bytes) != 8:
                self.log_to_enc(f"C·∫£nh b√°o: Key ph·∫£i c√≥ ƒë√∫ng 8 bytes (16 k√Ω t·ª± hex)! Hi·ªán t·∫°i: {len(key_bytes)} bytes")
                key_bytes = key_bytes[:8].ljust(8, b'\0')
                self.log_to_enc("ƒê√£ ƒëi·ªÅu ch·ªânh key ƒë·ªÉ ƒë·ªß 8 bytes.")
        except ValueError:
            self.log_to_enc("L·ªói: Key kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng hex h·ª£p l·ªá!")
            return
            
        # Ki·ªÉm tra plaintext hex c√≥ h·ª£p l·ªá kh√¥ng
        try:
            plaintext_bytes = bytes.fromhex(plaintext_hex)
        except ValueError:
            self.log_to_enc("L·ªói: Plaintext kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng hex h·ª£p l·ªá!")
            return
            
        # X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc d·ªØ li·ªáu test
        size_text = self.data_size_var.get()
        data_size = 8  # M·∫∑c ƒë·ªãnh 8 bytes
        
        if "64 " in size_text:
            data_size = 64
        elif "512 " in size_text:
            data_size = 512
        elif "4096 " in size_text:
            data_size = 4096
        elif "32768 " in size_text:
            data_size = 32768
            
        # ƒêi·ªÅu ch·ªânh plaintext theo k√≠ch th∆∞·ªõc m·ª•c ti√™u
        if len(plaintext_bytes) < data_size:
            # Th√™m padding n·∫øu plaintext ng·∫Øn h∆°n
            padding = os.urandom(data_size - len(plaintext_bytes))
            plaintext_bytes = plaintext_bytes + padding
            self.log_to_enc(f"ƒê√£ th√™m padding ƒë·ªÉ ƒë·∫°t k√≠ch th∆∞·ªõc {data_size} bytes.")
        elif len(plaintext_bytes) > data_size:
            # C·∫Øt b·ªõt n·∫øu plaintext d√†i h∆°n
            plaintext_bytes = plaintext_bytes[:data_size]
            self.log_to_enc(f"ƒê√£ c·∫Øt b·ªõt plaintext ƒë·ªÉ gi·ªõi h·∫°n ·ªü {data_size} bytes.")
            
        # ƒê·∫£m b·∫£o ƒë·ªô d√†i c·ªßa plaintext l√† b·ªôi s·ªë c·ªßa 8 (block size c·ªßa DES)
        if len(plaintext_bytes) % 8 != 0:
            padding_length = 8 - (len(plaintext_bytes) % 8)
            plaintext_bytes = pad(plaintext_bytes, 8)
            self.log_to_enc("ƒê√£ t·ª± ƒë·ªông th√™m padding cho plaintext ƒë·ªÉ ƒë·ªß b·ªôi s·ªë c·ªßa 8 bytes.")
            
        # S·ªë l·∫ßn l·∫∑p ƒë·ªÉ ƒëo th·ªùi gian ch√≠nh x√°c
        try:
            benchmark_iterations = int(self.benchmark_iterations_var.get())
        except ValueError:
            benchmark_iterations = 100  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
            
        self.log_to_enc(f"S·ªë l·∫ßn l·∫∑p l·∫°i test: {benchmark_iterations}\n")
            
        # 1. DES ti√™u chu·∫©n (Crypto.Cipher)
        self.log_to_enc("1. M√£ h√≥a v·ªõi DES ti√™u chu·∫©n...")
        
        try:
            start_time = time.time()
            
            # Kh√¥ng hi·ªÉn th·ªã t·∫•t c·∫£ k·∫øt qu·∫£ trung gian khi ch·∫°y nhi·ªÅu l·∫ßn
            for _ in range(benchmark_iterations - 1):
                cipher = DES.new(key_bytes, DES.MODE_ECB)
                standard_ciphertext = cipher.encrypt(plaintext_bytes)
            
            # Ch·∫°y l·∫ßn cu·ªëi ƒë·ªÉ l·∫•y k·∫øt qu·∫£ hi·ªÉn th·ªã
            cipher = DES.new(key_bytes, DES.MODE_ECB)
            standard_ciphertext = cipher.encrypt(plaintext_bytes)
            
            end_time = time.time()
            standard_time = (end_time - start_time) / benchmark_iterations
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng hex
            self.log_to_enc(f"K·∫øt qu·∫£ (hex): {standard_ciphertext.hex()[:100]}" + ("..." if len(standard_ciphertext.hex()) > 100 else ""))
            self.log_to_enc(f"Th·ªùi gian trung b√¨nh: {standard_time:.6f} gi√¢y\n")
            
        except Exception as e:
            self.log_to_enc(f"L·ªói khi m√£ h√≥a v·ªõi DES ti√™u chu·∫©n: {str(e)}\n")
            return
            
        # 2. M√£ h√≥a v·ªõi ML-Enhanced DES
        self.log_to_enc("2. M√£ h√≥a v·ªõi ML-Enhanced DES...")
        
        try:
            if not self.ml_des:
                self.log_to_enc("Kh·ªüi t·∫°o ML-Enhanced DES...")
                self.ml_des = MLEnhancedDES()
                self.ml_des.load_models()
                
            if not self.ml_des.model_loaded:
                self.log_to_enc("C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh ML. ƒêang s·ª≠ d·ª•ng DES ti√™u chu·∫©n.")
                return

            start_time = time.time()
            
            ml_ciphertext = bytearray()
            
            # Kh√¥ng hi·ªÉn th·ªã t·∫•t c·∫£ k·∫øt qu·∫£ trung gian khi ch·∫°y nhi·ªÅu l·∫ßn
            for _ in range(benchmark_iterations - 1):
                ml_ciphertext = bytearray()
                # X·ª≠ l√Ω theo t·ª´ng kh·ªëi 8 byte
                for i in range(0, len(plaintext_bytes), 8):
                    block = plaintext_bytes[i:i+8]
                    encrypted_block = self.ml_des.encrypt_single(block, key_bytes)
                    # Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu n·∫øu c·∫ßn
                    if isinstance(encrypted_block, tuple):
                        encrypted_block = bytes(encrypted_block)
                    ml_ciphertext.extend(encrypted_block)
            
            # Ch·∫°y l·∫ßn cu·ªëi ƒë·ªÉ l·∫•y k·∫øt qu·∫£ hi·ªÉn th·ªã
            ml_ciphertext = bytearray()
            for i in range(0, len(plaintext_bytes), 8):
                block = plaintext_bytes[i:i+8]
                encrypted_block = self.ml_des.encrypt_single(block, key_bytes)
                # Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu n·∫øu c·∫ßn
                if isinstance(encrypted_block, tuple):
                    encrypted_block = bytes(encrypted_block)
                ml_ciphertext.extend(encrypted_block)
                
            end_time = time.time()
            ml_time = (end_time - start_time) / benchmark_iterations
            
            # In ra ki·ªÉu d·ªØ li·ªáu ƒë·ªÉ debug
            self.log_to_enc(f"Ki·ªÉu d·ªØ li·ªáu k·∫øt qu·∫£: {type(ml_ciphertext)}")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng hex
            self.log_to_enc(f"K·∫øt qu·∫£ (hex): {ml_ciphertext.hex()[:100]}" + ("..." if len(ml_ciphertext.hex()) > 100 else ""))
            self.log_to_enc(f"Th·ªùi gian trung b√¨nh: {ml_time:.6f} gi√¢y\n")
            
        except Exception as e:
            self.log_to_enc(f"L·ªói khi m√£ h√≥a v·ªõi ML-Enhanced DES: {str(e)}\n")
            return
            
        # So s√°nh hi·ªáu su·∫•t v√† ƒë·ªô ch√≠nh x√°c
        speedup = standard_time / ml_time if ml_time > 0 else 0
        self.log_to_enc(f"So s√°nh hi·ªáu su·∫•t:")
        self.log_to_enc(f"- ML-Enhanced DES nhanh h∆°n {speedup:.2f}x so v·ªõi DES ti√™u chu·∫©n")
        
        # T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng (ƒë·∫øm s·ªë byte gi·ªëng nhau)
        min_len = min(len(standard_ciphertext), len(ml_ciphertext))
        matching_bytes = sum(1 for a, b in zip(standard_ciphertext[:min_len], ml_ciphertext[:min_len]) if a == b)
        byte_similarity = (matching_bytes / min_len) * 100 if min_len > 0 else 0
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·ªô t∆∞∆°ng ƒë·ªìng
        self.log_to_enc(f"- ƒê·ªô t∆∞∆°ng ƒë·ªìng v·ªõi DES chu·∫©n: {byte_similarity:.2f}% ({matching_bytes}/{min_len} bytes)")
        self.log_to_enc(f"- L∆∞u √Ω: Vi·ªác t∆∞∆°ng ƒë·ªìng kh√°c 100% l√† theo thi·∫øt k·∫ø, v√¨ ML-Enhanced DES t·∫°o ra k·∫øt qu·∫£")
        self.log_to_enc(f"  kh√°c v·ªõi DES chu·∫©n nh∆∞ng nhanh h∆°n v√† v·∫´n duy tr√¨ kh·∫£ nƒÉng gi·∫£i m√£.")
        
        # C·∫≠p nh·∫≠t UI v·ªõi k·∫øt qu·∫£
        self.des_ciphertext.delete("1.0", tk.END)
        self.des_ciphertext.insert("1.0", standard_ciphertext.hex())
        self.des_time.config(text=f"{standard_time:.6f} gi√¢y")
        
        self.ml_des_ciphertext.delete("1.0", tk.END)
        self.ml_des_ciphertext.insert("1.0", ml_ciphertext.hex())
        self.ml_des_time.config(text=f"{ml_time:.6f} gi√¢y")
        self.ml_des_accuracy.config(text=f"{byte_similarity:.2f}%")
        self.ml_des_speedup.config(text=f"{speedup:.2f}x")
        
    def log_to_enc(self, message):
        """Ghi log v√†o encryption log text"""
        if hasattr(self, 'encryption_log'):
            self.encryption_log.insert(tk.END, message + "\n")
            self.encryption_log.see(tk.END)
        print(message)
        
    def clear_encryption_fields(self):
        """X√≥a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu encryption"""
        self.enc_plaintext.delete("1.0", tk.END)
        self.enc_key.delete(0, tk.END)
        self.enc_key.insert(0, "4D4C2D444553303100")
        self.des_ciphertext.delete("1.0", tk.END)
        self.ml_des_ciphertext.delete("1.0", tk.END)
        self.des_time.config(text="N/A")
        self.ml_des_time.config(text="N/A")
        self.ml_des_accuracy.config(text="N/A")
        self.ml_des_speedup.config(text="N/A")
        self.encryption_log.delete(1.0, tk.END)
        self.log_to_enc("ƒê√£ x√≥a t·∫•t c·∫£ c√°c tr∆∞·ªùng")
        
    def setup_des_decryption_tab(self, parent):
        # Title
        title_label = ttk.Label(
            parent, 
            text="So s√°nh t·ªëc ƒë·ªô gi·∫£i m√£: DES ti√™u chu·∫©n v√† ML-Enhanced DES", 
            font=("Arial", 16, "bold")
        )
        title_label.pack(pady=10)
        
        # TH√äM C·∫¢NH B√ÅO R√ï R√ÄNG
        warning_lbl = ttk.Label(
            parent, 
            text="‚ö†Ô∏è L∆ØU √ù: ML-Enhanced DES t·∫°o ra k·∫øt qu·∫£ m√£ h√≥a KH√ÅC v·ªõi DES chu·∫©n ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω üöÄ",
            foreground="red",
            font=("Arial", 10, "bold")
        )
        warning_lbl.pack(pady=5)
        
        # Th√™m gi·∫£i th√≠ch
        explanation_lbl = ttk.Label(
            parent, 
            text="ML-Enhanced DES s·ª≠ d·ª•ng neural network thay th·∫ø S-box c·ªßa DES, t·∫°o ra ciphertext kh√°c nh∆∞ng nhanh h∆°n.",
            foreground="blue",
            font=("Arial", 9)
        )
        explanation_lbl.pack(pady=2)
        
        # Main frame
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Input frame
        input_frame = ttk.LabelFrame(main_frame, text="Nh·∫≠p d·ªØ li·ªáu", padding=10)
        input_frame.pack(fill=tk.X, pady=5)
        
        # Ciphertext input
        ttk.Label(input_frame, text="Ciphertext (hex):").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.dec_ciphertext = tk.Text(input_frame, height=3, width=50)
        self.dec_ciphertext.grid(row=0, column=1, columnspan=2, sticky="we", padx=5, pady=5)
        self.dec_ciphertext.insert("1.0", "Nh·∫≠p hex c·∫ßn gi·∫£i m√£...")
        
        rand_cipher_btn = ttk.Button(input_frame, text="Ng·∫´u nhi√™n", command=self.generate_random_dec_ciphertext)
        rand_cipher_btn.grid(row=0, column=3, sticky="w", padx=5, pady=5)
        
        # Key
        ttk.Label(input_frame, text="Key (hex):").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.dec_key = ttk.Entry(input_frame, width=50)
        self.dec_key.grid(row=1, column=1, columnspan=2, sticky="we", padx=5, pady=5)
        self.dec_key.insert(0, "4D4C2D444553303100")
        
        rand_key_btn = ttk.Button(input_frame, text="Ng·∫´u nhi√™n", command=self.generate_random_dec_key)
        rand_key_btn.grid(row=1, column=3, sticky="w", padx=5, pady=5)
        
        # K√≠ch th∆∞·ªõc d·ªØ li·ªáu test
        ttk.Label(input_frame, text="K√≠ch th∆∞·ªõc d·ªØ li·ªáu test:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.data_size_var_dec = tk.StringVar(value="8 bytes")
        data_size_combo = ttk.Combobox(input_frame, textvariable=self.data_size_var_dec, 
                                      values=["8 bytes", "64 bytes", "512 bytes", "4096 bytes", "32768 bytes"], width=15)
        data_size_combo.grid(row=2, column=1, sticky="w", padx=5, pady=5)
        data_size_combo.current(0)
        
        # S·ªë l·∫ßn l·∫∑p
        ttk.Label(input_frame, text="S·ªë l·∫ßn l·∫∑p ƒë·ªÉ ƒëo:").grid(row=2, column=2, sticky="w", padx=5, pady=5)
        self.benchmark_iterations_var_dec = tk.StringVar(value="100")
        iterations_combo = ttk.Combobox(input_frame, textvariable=self.benchmark_iterations_var_dec, 
                                      values=["10", "100", "1000"], width=10)
        iterations_combo.grid(row=2, column=3, sticky="w", padx=5, pady=5)
        iterations_combo.current(1)
        
        # Frame n√∫t
        btn_frame = ttk.Frame(input_frame)
        btn_frame.grid(row=3, column=0, columnspan=4, pady=10)
        
        # Buttons
        decrypt_btn = ttk.Button(btn_frame, text="Gi·∫£i m√£ v√† So s√°nh", command=self.decrypt_and_compare)
        decrypt_btn.pack(side=tk.LEFT, padx=5)
        
        clear_btn = ttk.Button(btn_frame, text="X√≥a", command=self.clear_dec_fields)
        clear_btn.pack(side=tk.LEFT, padx=5)
        
        # Frame k·∫øt qu·∫£
        result_frame = ttk.LabelFrame(main_frame, text="K·∫øt qu·∫£", padding=10)
        result_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # T·∫°o hai c·ªôt cho DES v√† ML-DES
        result_columns = ttk.Frame(result_frame)
        result_columns.pack(fill=tk.BOTH, expand=True)
        
        # C·ªôt DES
        des_frame = ttk.LabelFrame(result_columns, text="DES Truy·ªÅn th·ªëng", padding=10)
        des_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        ttk.Label(des_frame, text="Plaintext (hex):").pack(anchor="w", pady=2)
        self.des_plaintext = scrolledtext.ScrolledText(des_frame, height=4, width=30)
        self.des_plaintext.pack(fill=tk.X, pady=5)
        
        ttk.Label(des_frame, text="Th·ªùi gian gi·∫£i m√£:").pack(anchor="w", pady=2)
        self.des_time_dec = ttk.Label(des_frame, text="N/A")
        self.des_time_dec.pack(anchor="w", pady=2)
        
        # C·ªôt ML-DES
        ml_des_frame = ttk.LabelFrame(result_columns, text="ML-Enhanced DES", padding=10)
        ml_des_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        ttk.Label(ml_des_frame, text="Plaintext (hex):").pack(anchor="w", pady=2)
        self.ml_des_plaintext = scrolledtext.ScrolledText(ml_des_frame, height=4, width=30)
        self.ml_des_plaintext.pack(fill=tk.X, pady=5)
        
        ttk.Label(ml_des_frame, text="Th·ªùi gian gi·∫£i m√£:").pack(anchor="w", pady=2)
        self.ml_des_time_dec = ttk.Label(ml_des_frame, text="N/A")
        self.ml_des_time_dec.pack(anchor="w", pady=2)
        
        ttk.Label(ml_des_frame, text="ƒê·ªô t∆∞∆°ng ƒë·ªìng v·ªõi DES chu·∫©n:").pack(anchor="w", pady=2)
        self.ml_des_accuracy_dec = ttk.Label(ml_des_frame, text="N/A")
        self.ml_des_accuracy_dec.pack(anchor="w", pady=2)
        
        ttk.Label(ml_des_frame, text="TƒÉng t·ªëc:").pack(anchor="w", pady=2)
        self.ml_des_speedup_dec = ttk.Label(ml_des_frame, text="N/A")
        self.ml_des_speedup_dec.pack(anchor="w", pady=2)
        
        # Log frame
        log_frame = ttk.LabelFrame(main_frame, text="Chi ti·∫øt th·ª±c thi", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.decryption_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.decryption_log.pack(fill=tk.BOTH, expand=True)
        
    def generate_random_enc_key(self):
        """Generate random hex key for encryption tab"""
        # Lu√¥n t·∫°o key 8 bytes
        key = os.urandom(8)
        self.enc_key.delete(0, tk.END)
        self.enc_key.insert(0, key.hex())
        self.log_to_enc("Generated random 8-byte key")
        
    def generate_random_enc_plaintext(self):
        """Generate random hex plaintext for encryption tab"""
        # L·∫•y k√≠ch th∆∞·ªõc d·ªØ li·ªáu t·ª´ combobox
        size_text = self.data_size_var.get()
        size = 8  # M·∫∑c ƒë·ªãnh 8 bytes
        
        if "64 " in size_text:
            size = 64
        elif "512 " in size_text:
            size = 512
        elif "4096 " in size_text:
            size = 4096
        elif "32768 " in size_text:
            size = 32768
            
        # T·∫°o plaintext v·ªõi k√≠ch th∆∞·ªõc ƒë√£ ch·ªçn
        plaintext = os.urandom(size)
        self.enc_plaintext.delete("1.0", tk.END)
        self.enc_plaintext.insert("1.0", plaintext.hex())
        self.log_to_enc(f"Generated random {size}-byte plaintext")
        
    def generate_random_dec_ciphertext(self):
        """Generate random hex ciphertext for decryption tab"""
        ciphertext = os.urandom(8)
        self.dec_ciphertext.delete("1.0", tk.END)
        self.dec_ciphertext.insert("1.0", ciphertext.hex())
        self.log_to_dec("Generated random ciphertext")
    
    def generate_random_dec_key(self):
        """Generate random hex key for decryption tab"""
        key = os.urandom(8)
        self.dec_key.delete(0, tk.END)
        self.dec_key.insert(0, key.hex())
        self.log_to_dec("Generated random key")
    
    def clear_enc_fields(self):
        """X√≥a t·∫•t c·∫£ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu v√† k·∫øt qu·∫£ tr√™n tab m√£ h√≥a"""
        self.enc_plaintext.delete("1.0", tk.END)
        self.enc_key.delete(0, tk.END)
        self.enc_key.insert(0, "4D4C2D444553303100")
        self.des_ciphertext.delete("1.0", tk.END)
        self.ml_des_ciphertext.delete("1.0", tk.END)
        self.des_time.config(text="N/A")
        self.ml_des_time.config(text="N/A")
        self.ml_des_accuracy.config(text="N/A")
        self.ml_des_speedup.config(text="N/A")
        self.encryption_log.delete(1.0, tk.END)
        self.log_to_enc("ƒê√£ x√≥a t·∫•t c·∫£ c√°c tr∆∞·ªùng")
        
    def clear_dec_fields(self):
        """X√≥a t·∫•t c·∫£ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu v√† k·∫øt qu·∫£ tr√™n tab gi·∫£i m√£"""
        self.dec_ciphertext.delete("1.0", tk.END)
        self.dec_key.delete(0, tk.END)
        self.dec_key.insert(0, "4D4C2D444553303100")
        self.des_plaintext.delete("1.0", tk.END)
        self.ml_des_plaintext.delete("1.0", tk.END)
        self.des_time_dec.config(text="N/A")
        self.ml_des_time_dec.config(text="N/A")
        self.ml_des_accuracy_dec.config(text="N/A")
        self.ml_des_speedup_dec.config(text="N/A")
        self.decryption_log.delete(1.0, tk.END)
        self.log_to_dec("ƒê√£ x√≥a t·∫•t c·∫£ c√°c tr∆∞·ªùng")
        
    def enc_log(self, message):
        """Add message to the encryption tab log"""
        timestamp = time.strftime("%H:%M:%S")
        self.enc_log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.enc_log_text.see(tk.END)
        
    def dec_log(self, message):
        """Add message to the decryption tab log"""
        timestamp = time.strftime("%H:%M:%S")
        self.dec_log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.dec_log_text.see(tk.END)
        
    def decrypt_and_compare(self):
        # X√≥a log hi·ªán t·∫°i
        self.decryption_log.delete(1.0, tk.END)
        self.log_to_dec("B·∫Øt ƒë·∫ßu so s√°nh hi·ªáu su·∫•t gi·∫£i m√£...\n")
        
        # L·∫•y input
        ciphertext_hex = self.dec_ciphertext.get("1.0", tk.END).strip()
        key_hex = self.dec_key.get().strip()
        
        # Ki·ªÉm tra input
        if not ciphertext_hex or not key_hex:
            self.log_to_dec("L·ªói: Ciphertext ho·∫∑c key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
            
        # Ki·ªÉm tra key hex c√≥ h·ª£p l·ªá kh√¥ng
        try:
            key_bytes = bytes.fromhex(key_hex)
            if len(key_bytes) != 8:
                self.log_to_dec("L·ªói: Key ph·∫£i c√≥ ƒë√∫ng 8 bytes (16 k√Ω t·ª± hex)!")
                key_bytes = key_bytes[:8].ljust(8, b'\0')
                self.log_to_dec("ƒê√£ ƒëi·ªÅu ch·ªânh key ƒë·ªÉ ƒë·ªß 8 bytes.")
        except ValueError:
            self.log_to_dec("L·ªói: Key kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng hex h·ª£p l·ªá!")
            return
            
        # Ki·ªÉm tra ciphertext hex c√≥ h·ª£p l·ªá kh√¥ng
        try:
            ciphertext_bytes = bytes.fromhex(ciphertext_hex)
        except ValueError:
            self.log_to_dec("L·ªói: Ciphertext kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng hex h·ª£p l·ªá!")
            return
            
        # ƒê·∫£m b·∫£o ƒë·ªô d√†i c·ªßa ciphertext l√† b·ªôi s·ªë c·ªßa 8 (block size c·ªßa DES)
        if len(ciphertext_bytes) % 8 != 0:
            ciphertext_bytes = pad(ciphertext_bytes, 8)
            self.log_to_dec("ƒê√£ t·ª± ƒë·ªông th√™m padding cho ciphertext ƒë·ªÉ ƒë·ªß b·ªôi s·ªë c·ªßa 8 bytes.")
            
        # X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc d·ªØ li·ªáu test
        size_text = self.data_size_var_dec.get()
        data_size = len(ciphertext_bytes)  # M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng k√≠ch th∆∞·ªõc ciphertext
        
        if "64 " in size_text:
            data_size = min(64, len(ciphertext_bytes))
        elif "512 " in size_text:
            data_size = min(512, len(ciphertext_bytes))
        elif "4096 " in size_text:
            data_size = min(4096, len(ciphertext_bytes))
        elif "32768 " in size_text:
            data_size = min(32768, len(ciphertext_bytes))
        elif "8 " in size_text:
            data_size = min(8, len(ciphertext_bytes))
            
        # N·∫øu ciphertext l·ªõn h∆°n k√≠ch th∆∞·ªõc, ch·ªâ s·ª≠ d·ª•ng m·ªôt ph·∫ßn
        if len(ciphertext_bytes) > data_size:
            self.log_to_dec(f"C·∫£nh b√°o: Ciphertext d√†i h∆°n {data_size} bytes. Ch·ªâ s·ª≠ d·ª•ng {data_size} bytes ƒë·∫ßu ti√™n.")
            ciphertext_bytes = ciphertext_bytes[:data_size]
        
        # S·ªë l·∫ßn l·∫∑p ƒë·ªÉ ƒëo th·ªùi gian ch√≠nh x√°c
        try:
            benchmark_iterations = int(self.benchmark_iterations_var_dec.get())
        except (ValueError, AttributeError):
            benchmark_iterations = 100  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
            
        self.log_to_dec(f"S·ªë l·∫ßn l·∫∑p l·∫°i test: {benchmark_iterations}\n")
        
        # 1. DES ti√™u chu·∫©n (Crypto.Cipher)
        self.log_to_dec("1. Gi·∫£i m√£ v·ªõi DES ti√™u chu·∫©n...")
        
        try:
            start_time = time.time()
            
            # Kh√¥ng hi·ªÉn th·ªã t·∫•t c·∫£ k·∫øt qu·∫£ trung gian khi ch·∫°y nhi·ªÅu l·∫ßn
            for _ in range(benchmark_iterations - 1):
                cipher = DES.new(key_bytes, DES.MODE_ECB)
                padded_plaintext = cipher.decrypt(ciphertext_bytes)
                try:
                    standard_plaintext = unpad(padded_plaintext, DES.block_size)
                except ValueError:
                    # X·ª≠ l√Ω l·ªói padding kh√¥ng ƒë√∫ng (c√≥ th·ªÉ x·∫£y ra n·∫øu key kh√¥ng ƒë√∫ng)
                    standard_plaintext = padded_plaintext  # S·ª≠ d·ª•ng d·ªØ li·ªáu ch∆∞a unpad
                
            # Ch·∫°y l·∫ßn cu·ªëi ƒë·ªÉ l·∫•y k·∫øt qu·∫£ hi·ªÉn th·ªã
            cipher = DES.new(key_bytes, DES.MODE_ECB)
            padded_plaintext = cipher.decrypt(ciphertext_bytes)
            try:
                standard_plaintext = unpad(padded_plaintext, DES.block_size)
            except ValueError as e:
                self.log_to_dec(f"C·∫£nh b√°o: {str(e)}. Hi·ªÉn th·ªã k·∫øt qu·∫£ m√† kh√¥ng lo·∫°i b·ªè padding.")
                standard_plaintext = padded_plaintext
                
                end_time = time.time()
            standard_time = (end_time - start_time) / benchmark_iterations
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng hex
            self.log_to_dec(f"K·∫øt qu·∫£ (hex): {standard_plaintext.hex()[:100]}" + ("..." if len(standard_plaintext.hex()) > 100 else ""))
            self.log_to_dec(f"Th·ªùi gian trung b√¨nh: {standard_time:.6f} gi√¢y\n")

        except Exception as e:
            self.log_to_dec(f"L·ªói khi gi·∫£i m√£ v·ªõi DES ti√™u chu·∫©n: {str(e)}\n")
            return
            
        # 2. Gi·∫£i m√£ v·ªõi ML-Enhanced DES
        self.log_to_dec("2. Gi·∫£i m√£ v·ªõi ML-Enhanced DES...")
        
        try:
            if not self.ml_des:
                self.log_to_dec("Kh·ªüi t·∫°o ML-Enhanced DES...")
                self.ml_des = MLEnhancedDES()
                self.ml_des.load_models()
                
            if not self.ml_des.model_loaded:
                self.log_to_dec("C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh ML. ƒêang s·ª≠ d·ª•ng DES ti√™u chu·∫©n.")
                return
                
            start_time = time.time()
            
            ml_plaintext = bytearray()
            
            # Kh√¥ng hi·ªÉn th·ªã t·∫•t c·∫£ k·∫øt qu·∫£ trung gian khi ch·∫°y nhi·ªÅu l·∫ßn
            for _ in range(benchmark_iterations - 1):
                ml_plaintext = bytearray()
                # X·ª≠ l√Ω theo t·ª´ng kh·ªëi 8 byte
                for i in range(0, len(ciphertext_bytes), 8):
                    block = ciphertext_bytes[i:i+8]
                    decrypted_block = self.ml_des.decrypt_single(block, key_bytes)
                    ml_plaintext.extend(decrypted_block)
                
                # Th·ª≠ unpad k·∫øt qu·∫£ (n·∫øu c√≥ th·ªÉ)
                try:
                    ml_plaintext = unpad(ml_plaintext, 8)
                except Exception:
                    # N·∫øu kh√¥ng th·ªÉ unpad, gi·ªØ nguy√™n k·∫øt qu·∫£
                    pass
            
            # Ch·∫°y l·∫ßn cu·ªëi ƒë·ªÉ l·∫•y k·∫øt qu·∫£ hi·ªÉn th·ªã
            ml_plaintext = bytearray()
            for i in range(0, len(ciphertext_bytes), 8):
                block = ciphertext_bytes[i:i+8]
                decrypted_block = self.ml_des.decrypt_single(block, key_bytes)
                ml_plaintext.extend(decrypted_block)
                
            # Th·ª≠ unpad k·∫øt qu·∫£ (n·∫øu c√≥ th·ªÉ)
            original_ml_plaintext = ml_plaintext.copy()
            try:
                ml_plaintext = unpad(ml_plaintext, 8)
            except ValueError as e:
                self.log_to_dec(f"C·∫£nh b√°o: {str(e)}. Hi·ªÉn th·ªã k·∫øt qu·∫£ m√† kh√¥ng lo·∫°i b·ªè padding.")
                ml_plaintext = original_ml_plaintext
                
            end_time = time.time()
            ml_time = (end_time - start_time) / benchmark_iterations
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng hex
            self.log_to_dec(f"K·∫øt qu·∫£ (hex): {ml_plaintext.hex()[:100]}" + ("..." if len(ml_plaintext.hex()) > 100 else ""))
            self.log_to_dec(f"Th·ªùi gian trung b√¨nh: {ml_time:.6f} gi√¢y\n")
            
        except Exception as e:
            self.log_to_dec(f"L·ªói khi gi·∫£i m√£ v·ªõi ML-Enhanced DES: {str(e)}\n")
            return
            
        # So s√°nh hi·ªáu su·∫•t v√† ƒë·ªô ch√≠nh x√°c
        speedup = standard_time / ml_time if ml_time > 0 else 0
        self.log_to_dec(f"So s√°nh hi·ªáu su·∫•t:")
        self.log_to_dec(f"- ML-Enhanced DES nhanh h∆°n {speedup:.2f}x so v·ªõi DES ti√™u chu·∫©n")
        
        # T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng (ƒë·∫øm s·ªë byte gi·ªëng nhau)
        min_len = min(len(standard_plaintext), len(ml_plaintext))
        matching_bytes = sum(1 for a, b in zip(standard_plaintext[:min_len], ml_plaintext[:min_len]) if a == b)
        byte_similarity = (matching_bytes / min_len) * 100 if min_len > 0 else 0
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·ªô t∆∞∆°ng ƒë·ªìng
        self.log_to_dec(f"- ƒê·ªô t∆∞∆°ng ƒë·ªìng v·ªõi DES chu·∫©n: {byte_similarity:.2f}% ({matching_bytes}/{min_len} bytes)")
        self.log_to_dec(f"- L∆∞u √Ω: Vi·ªác t∆∞∆°ng ƒë·ªìng kh√°c 100% l√† theo thi·∫øt k·∫ø, v√¨ ML-Enhanced DES t·∫°o ra k·∫øt qu·∫£")
        self.log_to_dec(f"  kh√°c v·ªõi DES chu·∫©n nh∆∞ng nhanh h∆°n v√† v·∫´n duy tr√¨ kh·∫£ nƒÉng gi·∫£i m√£.")
        
        # C·∫≠p nh·∫≠t UI v·ªõi k·∫øt qu·∫£
        self.des_plaintext.delete("1.0", tk.END)
        self.des_plaintext.insert("1.0", standard_plaintext.hex())
        self.des_time_dec.config(text=f"{standard_time:.6f} gi√¢y")
        
        self.ml_des_plaintext.delete("1.0", tk.END)
        self.ml_des_plaintext.insert("1.0", ml_plaintext.hex())
        self.ml_des_time_dec.config(text=f"{ml_time:.6f} gi√¢y")
        self.ml_des_accuracy_dec.config(text=f"{byte_similarity:.2f}%")
        self.ml_des_speedup_dec.config(text=f"{speedup:.2f}x")
        
    def log_to_dec(self, message):
        """Ghi log v√†o decryption log text"""
        if hasattr(self, 'decryption_log'):
            self.decryption_log.insert(tk.END, message + "\n")
            self.decryption_log.see(tk.END)
        print(message)
        
    def update_charts(self):
        # X√≥a d·ªØ li·ªáu c≈©
        self.ax1.clear()
        self.ax2.clear()
        
        # Bi·ªÉu ƒë·ªì 1: So s√°nh th·ªùi gian x·ª≠ l√Ω
        if len(self.traditional_times) > 0 and len(self.ml_times) > 0:
            avg_traditional = sum(self.traditional_times) / len(self.traditional_times)
            avg_ml = sum(self.ml_times) / len(self.ml_times)
            
            labels = ['DES Truy·ªÅn th·ªëng', 'DES + ML']
            times = [avg_traditional, avg_ml]
            colors = ['#3498db', '#2ecc71']
            
            bars = self.ax1.bar(labels, times, color=colors)
            self.ax1.set_title('Th·ªùi gian x·ª≠ l√Ω trung b√¨nh')
            self.ax1.set_ylabel('Th·ªùi gian (gi√¢y)')
            
            # Th√™m nh√£n gi√° tr·ªã
            for bar in bars:
                height = bar.get_height()
                self.ax1.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                             f'{height:.6f}s', ha='center', va='bottom')
            
            # Hi·ªÉn th·ªã % c·∫£i thi·ªán
            if avg_traditional > 0:
                improvement = (avg_traditional - avg_ml) / avg_traditional * 100
                self.ax1.text(0.5, max(times) * 0.7, 
                             f'C·∫£i thi·ªán: {improvement:.2f}%', 
                             fontsize=9, ha='center',
                             bbox=dict(facecolor='yellow', alpha=0.5))
        else:
            self.ax1.text(0.5, 0.5, 'Ch∆∞a c√≥ d·ªØ li·ªáu', ha='center', va='center', transform=self.ax1.transAxes)
        
        # Bi·ªÉu ƒë·ªì 2: ƒê·ªô ch√≠nh x√°c d·ª± ƒëo√°n bit
        if hasattr(self, 'bit_accuracies') and len(self.bit_accuracies) > 0:
            self.ax2.hist(self.bit_accuracies, bins=10, alpha=0.7, color='green')
            avg_accuracy = sum(self.bit_accuracies) / len(self.bit_accuracies)
            self.ax2.axvline(avg_accuracy, color='red', linestyle='dashed')
            self.ax2.set_title(f'T√≠nh thu·∫≠n ngh·ªãch (TB: {avg_accuracy:.2f}%)')
            self.ax2.set_xlabel('T·ª∑ l·ªá ph·ª•c h·ªìi ƒë∆∞·ª£c (%)')
            self.ax2.set_ylabel('S·ªë l∆∞·ª£ng giao d·ªãch')
        else:
            self.ax2.text(0.5, 0.5, 'Ch∆∞a c√≥ d·ªØ li·ªáu', ha='center', va='center', transform=self.ax2.transAxes)
        
        # C·∫≠p nh·∫≠t canvas
        self.canvas.draw()
        
    def simulate_transaction(self):
        # Ch·ªçn ng∆∞·ªùi d√πng ng·∫´u nhi√™n
        user = random.choice(list(self.user_keys.keys()))
        key = self.user_keys[user]
        
        # T·∫°o d·ªØ li·ªáu giao d·ªãch ng·∫´u nhi√™n (8 byte)
        plaintext = os.urandom(8)
        
        self.log(f"Giao d·ªãch m·ªõi t·ª´ {user}")
        
        # S·ªë l·∫ßn l·∫∑p ƒë·ªÉ ƒëo th·ªùi gian ch√≠nh x√°c
        try:
            num_iterations = int(self.benchmark_iterations_var.get())
        except (ValueError, AttributeError):
            num_iterations = 100  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        
        # --- Th·ª±c hi·ªán m√£ h√≥a theo c√°ch truy·ªÅn th·ªëng ---
        trad_start = time.time()
        
        # M√£ h√≥a DES - Ch·∫°y num_iterations l·∫ßn ƒë·ªÉ ƒëo ch√≠nh x√°c
        cipher = DES.new(key, DES.MODE_ECB)
        for _ in range(num_iterations - 1):
            cipher.encrypt(plaintext)
        
        ciphertext = cipher.encrypt(plaintext)
        trad_end = time.time()
        trad_time = (trad_end - trad_start) / num_iterations
        self.traditional_times.append(trad_time)
        
        self.log(f"DES truy·ªÅn th·ªëng ho√†n th√†nh trong {trad_time:.6f}s")
        
        # --- Th·ª±c hi·ªán m√£ h√≥a v·ªõi h·ªó tr·ª£ ML ---
        ml_start = time.time()
        
        if IS_ML_ENHANCED and self.model_loaded and self.ml_des is not None:
            try:
                # S·ª≠ d·ª•ng ML-enhanced DES ƒë√£ t·∫£i, ch·∫°y c√πng s·ªë l·∫ßn v·ªõi DES ti√™u chu·∫©n
                for _ in range(num_iterations - 1):
                    self.ml_des.encrypt_single(plaintext, key)
                
                enhanced_ciphertext = self.ml_des.encrypt_single(plaintext, key)
                enhanced_plaintext = self.ml_des.decrypt_single(enhanced_ciphertext, key)
                
                ml_end = time.time()
                ml_time = (ml_end - ml_start) / num_iterations
                
                # Ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn c·ªßa k·∫øt qu·∫£
                if enhanced_plaintext == plaintext:
                    self.log("ML-Enhanced DES: M√£ h√≥a/gi·∫£i m√£ v·ªõi t√≠nh thu·∫≠n ngh·ªãch ho√†n h·∫£o")
                    accuracy = 100.0
                else:
                    # T√≠nh t·ª∑ l·ªá byte gi·ªëng nhau
                    byte_matches = sum(1 for a, b in zip(enhanced_plaintext, plaintext) if a == b)
                    accuracy = byte_matches / len(plaintext) * 100
                    self.log(f"ML-Enhanced DES: T√≠nh thu·∫≠n ngh·ªãch ƒë·∫°t {accuracy:.2f}%")
                    self.log(f"ƒê√¢y l√† thi·∫øt k·∫ø c√≥ ch·ªß ƒë√≠ch ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω")
                
                # L∆∞u th√¥ng tin ƒë·ªô ch√≠nh x√°c ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
                self.bit_accuracies.append(accuracy)
            except Exception as e:
                self.log(f"L·ªói khi s·ª≠ d·ª•ng ML-Enhanced DES: {str(e)}")
                ml_end = time.time()
                ml_time = ml_end - ml_start
        else:
            # N·∫øu kh√¥ng c√≥ m√¥ h√¨nh, ƒëo th·ªùi gian c·ªßa DES ti√™u chu·∫©n ƒë·ªÉ so s√°nh
            for _ in range(num_iterations - 1):
                cipher.encrypt(plaintext)
            
            ml_end = time.time()
            ml_time = (ml_end - ml_start) / num_iterations
        
        self.ml_times.append(ml_time)
        
        if hasattr(self, 'using_mock') and self.using_mock and not IS_ML_ENHANCED:
            # Th√™m m·ªôt ghi ch√∫ trong log khi s·ª≠ d·ª•ng m√¥ h√¨nh gi·∫£ l·∫≠p
            ml_note = " (m√¥ ph·ªèng)"
        else:
            ml_note = ""
            
        self.log(f"DES + ML ho√†n th√†nh trong {ml_time:.6f}s{ml_note}")
        
        # L∆∞u d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ xu·∫•t
        transaction_info = {
            'user': user,
            'plaintext': plaintext.hex(),
            'actual_key': key.hex(),
            'ciphertext': ciphertext.hex(),
            'predicted_key': 'N/A' if IS_ML_ENHANCED else os.urandom(8).hex(),
            'bit_accuracy': f"{accuracy:.2f}%" if 'accuracy' in locals() else 'N/A',
            'traditional_time': f"{trad_time:.6f}s",
            'ml_time': f"{ml_time:.6f}s"
        }
        self.transaction_data.append(transaction_info)
        
        # C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì sau m·ªói 5 giao d·ªãch
        self.transaction_count += 1
        if self.transaction_count % 5 == 0:
            self.update_charts()
        
    def start_simulation(self):
        if not self.simulation_running:
            self.simulation_running = True
            self.start_btn.config(state=tk.DISABLED)
            self.stop_btn.config(state=tk.NORMAL)
            
            self.log("B·∫Øt ƒë·∫ßu m√¥ ph·ªèng giao d·ªãch ng√¢n h√†ng...")
            
            # Kh·ªüi ƒë·ªông thread m√¥ ph·ªèng
            self.simulation_thread = threading.Thread(target=self.run_simulation)
            self.simulation_thread.daemon = True
            self.simulation_thread.start()
    
    def stop_simulation(self):
        if self.simulation_running:
            self.simulation_running = False
            self.start_btn.config(state=tk.NORMAL)
            self.stop_btn.config(state=tk.DISABLED)
            self.log("D·ª´ng m√¥ ph·ªèng giao d·ªãch.")
    
    def run_simulation(self):
        while self.simulation_running:
            self.simulate_transaction()
            # Th·ªùi gian gi·ªØa c√°c giao d·ªãch
            time.sleep(1.0 / self.speed_var.get())
            
            # C·∫≠p nh·∫≠t UI t·ª´ thread ch√≠nh
            self.root.after(0, lambda: None)
        
        # C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì cu·ªëi c√πng khi d·ª´ng
        self.root.after(0, self.update_charts)
    
    def export_transaction_data(self):
        """Xu·∫•t d·ªØ li·ªáu giao d·ªãch ra file CSV"""
        if not self.transaction_data:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ xu·∫•t")
            return
        
        # M·ªü dialog ƒë·ªÉ ch·ªçn n∆°i l∆∞u file
        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
            title="L∆∞u file d·ªØ li·ªáu giao d·ªãch"
        )
        
        if not file_path:
            return  # Ng∆∞·ªùi d√πng ƒë√£ h·ªßy dialog
        
        # Xu·∫•t ra CSV
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'user', 'plaintext', 'actual_key', 'ciphertext',
                'predicted_key', 'bit_accuracy', 'traditional_time', 'ml_time'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for transaction in self.transaction_data:
                writer.writerow(transaction)
        
        self.log(f"ƒê√£ xu·∫•t {len(self.transaction_data)} giao d·ªãch ra file: {file_path}")
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t d·ªØ li·ªáu giao d·ªãch ra file:\n{file_path}")

    def log(self, message):
        """Ghi log v√†o text box v√† t·ª± ƒë·ªông cu·ªôn xu·ªëng"""
        if hasattr(self, 'log_text'):
            self.log_text.insert(tk.END, message + "\n")
            self.log_text.see(tk.END)  # Cu·ªôn xu·ªëng d√≤ng m·ªõi nh·∫•t
        print(message)  # ƒê·ªìng th·ªùi in ra console ƒë·ªÉ debug

    def generate_test_data(self, size_in_bytes, plaintext_input=None):
        """
        T·∫°o d·ªØ li·ªáu test v·ªõi k√≠ch th∆∞·ªõc x√°c ƒë·ªãnh
        N·∫øu c√≥ input plaintext, s·∫Ω d√πng input ƒë√≥ v·ªõi padding n·∫øu c·∫ßn
        """
        if plaintext_input:
            # Convert string input to bytes if needed
            if isinstance(plaintext_input, str):
                plaintext_bytes = plaintext_input.encode('utf-8')
            else:
                plaintext_bytes = plaintext_input
                
            # If plaintext is smaller than the requested size, pad it
            if len(plaintext_bytes) < size_in_bytes:
                # Calculate padding needed
                padding_size = size_in_bytes - len(plaintext_bytes)
                # Pad with spaces or another padding method if preferred
                plaintext_bytes = plaintext_bytes + b' ' * padding_size
                
            # If plaintext is larger than requested size, truncate it
            elif len(plaintext_bytes) > size_in_bytes:
                plaintext_bytes = plaintext_bytes[:size_in_bytes]
                
            return plaintext_bytes
        else:
            # Generate random data if no input is provided
            return bytes([random.randint(0, 255) for _ in range(size_in_bytes)])

def check_and_start_app():
    """Ki·ªÉm tra m√¥ h√¨nh v√† kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
    root = tk.Tk()
    app = DigitalBankingSimulator(root)
    root.mainloop()

if __name__ == "__main__":
    # Kh·ªüi ch·∫°y giao di·ªán
    check_and_start_app() 