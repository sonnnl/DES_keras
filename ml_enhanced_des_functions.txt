# GIẢI THÍCH CÁC HÀM TRONG ML-ENHANCED DES

## TỔNG QUAN

File ml_enhanced_des.py chứa lớp MLEnhancedDES, một hệ thống mã hóa kết hợp thuật toán DES truyền thống với mô hình học máy để cải thiện hiệu suất. File này phục vụ 3 mục đích chính:
1. Huấn luyện mô hình học máy để mô phỏng các bước của DES
2. Lưu và tải các mô hình đã huấn luyện
3. Mã hóa/giải mã dữ liệu bằng mô hình học máy

## CÁC HÀM CHÍNH

### 1. KHỞI TẠO VÀ TẢI MÔ HÌNH

#### __init__(self)
- Khởi tạo lớp MLEnhancedDES
- Thiết lập các thuộc tính cơ bản như model_loaded, sbox_model_1, sbox_model_2, perm_model

#### load_models(self, model_dir=None)
- Tải các mô hình đã huấn luyện (2 mô hình S-box và 1 mô hình permutation)
- Nếu không tìm thấy mô hình, model_loaded = False

### 2. TẠO DỮ LIỆU HUẤN LUYỆN

#### generate_training_data(self, num_samples=100000)
- Tạo dữ liệu huấn luyện từ DES truyền thống
- Tạo dữ liệu ngẫu nhiên và áp dụng DES chuẩn
- Ghi lại đầu vào/đầu ra của S-box và permutation
- Dùng làm ground truth cho huấn luyện ban đầu

#### generate_enhanced_training_data(self, num_samples=10000, save_samples=False, samples_file=None, num_save_samples=1000)
- Tạo dữ liệu từ ML-Enhanced DES (dùng mô hình đã huấn luyện)
- Ghi lại các dự đoán của mô hình ML
- Dùng cho fine-tuning hoặc phân tích
- Được sử dụng trong hàm train_and_save_model

### 3. HUẤN LUYỆN MÔ HÌNH

#### build_model(self, input_size, output_size, hidden_layers=[128, 64], dropout_rate=0.2, learning_rate=0.001)
- Tạo kiến trúc mô hình neural network
- Hỗ trợ các tham số tùy chỉnh như số lớp ẩn, tỷ lệ dropout, tốc độ học

#### train_models(self, epochs=50, validation_split=0.2, dropout_rate=0.2, learning_rate=0.001)
- Huấn luyện 3 mô hình (2 S-box và 1 permutation)
- Sử dụng dữ liệu từ generate_training_data
- Trả về lịch sử huấn luyện để đánh giá

#### save_models(self, model_dir)
- Lưu các mô hình đã huấn luyện
- Tạo thư mục nếu chưa tồn tại

### 4. MÃ HÓA & GIẢI MÃ

#### encrypt_single(self, data, key)
- Mã hóa một khối dữ liệu 8-byte sử dụng mô hình ML
- Thay thế S-box và permutation bằng các dự đoán từ mô hình
- Nếu mô hình chưa được tải, sử dụng DES truyền thống

#### decrypt_single(self, data, key)
- Giải mã một khối dữ liệu 8-byte đã mã hóa
- Quy trình tương tự encrypt_single nhưng sử dụng subkeys theo thứ tự ngược lại

#### encrypt(self, data, key)
- Mã hóa nhiều khối dữ liệu (dùng encrypt_single cho từng khối 8-byte)
- Xử lý padding nếu cần thiết

#### decrypt(self, data, key)
- Giải mã nhiều khối dữ liệu (dùng decrypt_single cho từng khối 8-byte)
- Xử lý unpadding sau giải mã

### 5. CÁC HÀM PHỤ TRỢ DES

#### _generate_subkeys(self, key)
- Tạo 16 subkeys từ key chính
- Dùng trong quá trình mã hóa và giải mã

#### _initial_permutation(self, block)
- Thực hiện hoán vị ban đầu (IP) của DES

#### _final_permutation(self, block)
- Thực hiện hoán vị cuối cùng (FP) của DES

#### _expansion_function(self, data)
- Mở rộng khối 32-bit thành 48-bit theo bảng E của DES

#### _standard_des_encrypt(self, data, key)
- Thực hiện mã hóa DES truyền thống

#### _standard_des_decrypt(self, data, key)
- Thực hiện giải mã DES truyền thống

### 6. CÁC HÀM TIỆN ÍCH

#### _bytes_to_bits(self, data)
- Chuyển đổi dữ liệu dạng bytes thành dạng bit (0 và 1)

#### _bits_to_bytes(self, bits)
- Chuyển đổi dữ liệu dạng bit (0 và 1) thành dạng bytes

#### benchmark(self, data_size=1024, num_iterations=100)
- Đánh giá hiệu suất của ML-Enhanced DES so với DES truyền thống
- Đo thời gian mã hóa và giải mã của cả hai phương pháp

## HÀM HUẤN LUYỆN TOÀN DIỆN

### train_and_save_model(num_samples=100000, epochs=50, lr=0.001, bs=64, dr=0.2, save_path=None, optimize_for='balanced', save_training_data=False, early_stopping=True, patience=5, fast_mode=False)
- Hàm chính để huấn luyện và lưu toàn bộ mô hình ML-Enhanced DES
- Quản lý quá trình tạo dữ liệu (dùng generate_enhanced_training_data)
- Tùy chỉnh chiến lược huấn luyện: optimize_for tốc độ hoặc độ chính xác
- Hỗ trợ early stopping để tránh overfitting
- Lưu mô hình và dữ liệu huấn luyện nếu cần
- Đánh giá kết quả cuối cùng và xuất thông tin ra file

## QUY TRÌNH HOẠT ĐỘNG TỔNG THỂ

1. **Tạo dữ liệu**:
   - Ban đầu dùng `generate_training_data` để tạo dữ liệu ground truth từ DES truyền thống
   - Sau đó dùng `generate_enhanced_training_data` để tạo dữ liệu từ mô hình ML

2. **Huấn luyện mô hình**:
   - Xây dựng kiến trúc mô hình (2 S-box + 1 permutation)
   - Huấn luyện với dữ liệu được tạo

3. **Lưu và tải mô hình**:
   - Lưu các mô hình đã huấn luyện
   - Tải mô hình khi cần sử dụng

4. **Mã hóa/giải mã**:
   - Thay thế S-box và permutation bằng các dự đoán từ mô hình
   - Các bước còn lại giống DES truyền thống

## LƯU Ý QUAN TRỌNG

1. Hàm `generate_enhanced_training_data` được sử dụng trong `train_and_save_model`, KHÔNG nên xóa
2. Hai mô hình S-box được sử dụng luân phiên (theo vòng chẵn/lẻ) để tăng tính bảo mật và giảm overfitting
3. ML-Enhanced DES không nhằm mục đích tạo ra ciphertext giống hệt DES truyền thống, mà tập trung vào việc giảm chi phí tính toán
4. Để cải thiện hiệu suất, cần tối ưu phần vector hóa và batch processing 